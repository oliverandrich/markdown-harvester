[build-system]
requires = ["flit_core >=3.2,<4"]
build-backend = "flit_core.buildapi"

[project]
name = "markdown_harvester"
description = "A library and cli to download a webpage and convert it to markdown. It creates archives of single articles."
authors = [{ name = "Oliver Andrich", email = "oliver@andrich.me" }]
readme = "README.md"
license = { file = "LICENSE" }
keywords = ["scraping"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Operating System :: OS Independent",
    "Topic :: Software Development :: Libraries",
    "Topic :: Utilities",
    "Environment :: Web Environment",
]
dynamic = ["version"]
requires-python = ">=3.8"
dependencies = ["trafilatura", "extruct"]

[project.optional-dependencies]
playwright = ["playwright"]
httpx = ["httpx"]
all = ["markdown_harvester[playwright]", "markdown_harvester[httpx]"]
test = ["pytest", "pytest-cov", "pytest-mock", "pytest-randomly"]
dev = ["nox", "tomlkit", "pre-commit", "mkdocs-material", "flit"]

[project.urls]
Home = "https://markdown-havester.andrich.me/"
Documentation = "https://markdown-havester.andrich.me/"
Repository = "https://github.com/oliverandrich/markdown-havester"

# Black
[tool.black]
target-version = ["py38"]
line-length = 120
skip-string-normalization = true
exclude = '''
/(
    \.git
  | \.nox
  | \.tox
  | \.venv
  | _build
  | build
  | dist
  | ^.*\b(migrations)\b.*$
)/
'''

# Pyright
[tool.pyright]
venvPath = "."
venv = ".venv"
typeCheckingMode = "strict"
ignore = ["./tests/**/*"]

# Ruff
[tool.ruff]
target-version = "py38"
line-length = 100

# Allow unused variables when underscore-prefixed
[tool.ruff.lint]
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
select = [
    "A",   # flake8-builtins
    "ARG", # flake8-unused-arguments
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "DJ",  # flake8-django
    "E",   # pycodestyle
    "F",   # pyflakes
    "FBT", # flake8-boolean-trap
    "N",   # pep8-naming
    "Q",   # flake8-quotes
    "TID", # flake8-tidy-imports
    "W",   # pycodestyle
    "YTT", # flake8-2020
]

ignore = [
    # Allow non-abstract empty methods in abstract base classes
    "B027",
    # Allow boolean positional values in function calls, like `dict.get(... True)`
    "FBT003",
    # Ignore complexity
    "C901",
]

unfixable = [
    # Don't touch unused imports
    "F401",
    # Don't touch unused variables
    "F841",
]

# Exclude a variety of commonly ignored directories
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".github",
    ".hg",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "**pypackages**",
    "_build",
    "build",
    "dist",
    "migrations",
    "node_modules",
    "static",
]

[tool.ruff.lint.isort]
known-first-party = ["markdown_harvester"]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.per-file-ignores]
"tests/**/*" = ["TID252"]

# Pytest
[tool.pytest.ini_options]
pythonpath = ["src"]
testpaths = ["tests"]

# Coverage
[tool.coverage.run]
source = ["markdown_harvester"]
branch = true

[tool.coverage.report]
exclude_lines = ["no cov", "if __name__ == .__main__.:", "if TYPE_CHECKING:"]
